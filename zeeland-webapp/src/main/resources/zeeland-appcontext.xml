<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

    <context:annotation-config />

    <context:component-scan base-package="com.abctech.zeeland.**" />

    <bean id="zeelandProperties" class="com.abctech.zeeland.form.util.ZeelandProperties">
        <property name="apiPropertiesManager" ref="apiPropertiesManager"/>
    </bean>
    
    <!-- Hydra login -->
    <!-- Information which is sent to Hydra for login registration purposes -->
    <bean id="hydraRegistrationComponent" class="no.api.hydra.client.HydraClientRegistration"
          init-method="register" destroy-method="unregister" scope="singleton">
        <property name="directorManager" ref="directorManager"/>
        <property name="propertiesManager" ref="apiPropertiesManager" />
        <property name="apiAdminPingURL" value="#{apiPropertiesFacade.globalProperties['hydra.shall.ping.zeeland.on.this.url'].value}" />
        <property name="hydraShallCallbackHere" value="#{apiPropertiesFacade.globalProperties['hydra.to.zeeland.callback.url'].value}" />
        <property name="serviceName" value="zeeland" />
        <property name="clientTitle" value="Zeeland" />
        <property name="clientDescription" value="Zeeland application" />
        <property name="acceptedAcls">
            <list>
                <value>ROLE_ADMIN</value>
                <value>ROLE_SUPPORT</value>
                <value>TAG_ZEELAND</value>
            </list>
        </property>
    </bean>

    <!-- Contains common and often used functionality, such as ping-back -->
    <bean id="hydraClient" class="no.api.hydra.client.HydraClient">
        <property name="directorManager" ref="directorManager"/>
        <property name="propertiesManager" ref="apiPropertiesManager"/>
    </bean>

    <!-- Used for extracting Hydra related properties during startup -->
    <bean id="apiPropertiesFacade" class="no.api.properties.api.spring.ApiPropertiesFacade">
        <property name="apiPropertiesManager" ref="apiPropertiesManager"/>
    </bean>

    <!-- You do not need an iris provider if you shall only implement hydra support -->
    <bean id="providerManager" class="no.api.director.provider.ProviderManagerImpl">
        <property name="providers">
            <list>
                <ref bean="hydraProvider"/>
            </list>
        </property>
    </bean>

    <!-- Director manager is used in the registration component -->
    <bean id="directorManager" class="no.api.director.DirectorManagerImpl" autowire="byName">
        <property name="providerManager" ref="providerManager"/>
    </bean>

    <!-- Hydra support for login services, used when calling hydra -->
    <bean id="hydraProvider" class="no.api.hydra.director.HydraProvider">
        <property name="apiPropertiesManager" ref="apiPropertiesManager"/>
    </bean>

    <bean id="principalSecurityComponent" class="com.abctech.zeeland.security.PrincipalSecurityComponent">
        <!-- true = use Hydra, false = do not use Hydra -->
        <property name="useHydraAuthentication" value="#{systemProperties['use.hydra']==null?true:systemProperties['use.hydra']}"/>
    </bean>

    <jaxws:client id="AdService" serviceClass="no.zett.service.facade.AdService">
    	<jaxws:properties>
    		<entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/AdService?wsdl"/>
    	</jaxws:properties>
    </jaxws:client>
                  
    <jaxws:client id="UserService" serviceClass="no.zett.service.facade.UserService">
   		<jaxws:properties>
    		<entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/UserService?wsdl"/>
    	</jaxws:properties>                   
    </jaxws:client>
    
    <jaxws:client id="CompanyService" serviceClass="no.zett.service.facade.CompanyService">
   		<jaxws:properties>
    		<entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/CompanyService?wsdl"/>
    	</jaxws:properties>                   
    </jaxws:client>
    
    <jaxws:client id="CategoryService" serviceClass="no.zett.service.facade.CategoryService">
   		<jaxws:properties>
    		<entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/CategoryService?wsdl"/>
    	</jaxws:properties>                   
    </jaxws:client>
    
    <jaxws:client id="SearchItemService" serviceClass="no.zett.service.facade.SearchItemService">
       	<jaxws:properties>
    		<entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/SearchItemService?wsdl"/>
    	</jaxws:properties>                   
    </jaxws:client>
    
    <jaxws:client id="FraudLogService" serviceClass="no.zett.service.facade.FraudLogService">
       	<jaxws:properties>
    		<entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/FraudLogService?wsdl"/>
    	</jaxws:properties> 
    </jaxws:client>

    <jaxws:client id="BookingAdminService" serviceClass="no.zett.service.facade.BookingAdminService">
        <jaxws:properties>
            <entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/BookingAdminService?wsdl"/>
        </jaxws:properties>
    </jaxws:client>

    <jaxws:client id="PrintAdService" serviceClass="no.zett.service.facade.PrintAdService">
        <jaxws:properties>
            <entry key="javax.xml.ws.service.endpoint.address" value="#{zeelandProperties.zettServicesURL}/PrintAdService?wsdl"/>
        </jaxws:properties>
    </jaxws:client>



    <!--<bean id="tokenObject" class="com.abctech.zeeland.security.Token" >-->
      <!--<property name="token" value=""/>-->
   <!--</bean>-->

    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path = "/*.html" />
	    	<bean class="com.abctech.zeeland.interception.DefaultInterceptor">
	    		<property name="excludeList">
	    			<list>
	    				<value>/authtenticated.html</value>
	    				<value>/accessdenied.html</value>
	    			</list>
	    		</property>
	    	</bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- This bean required by obscura-client -->
    <bean id="springApplicationContext" class="no.api.pantheon.spring.SpringApplicationContextProvider" />

</beans>
